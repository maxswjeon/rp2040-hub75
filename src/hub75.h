/*****************************************************
 *
 *	LED matrix driver for Raspberry RP2040
 *	(c) Peter Schulten, MÃ¼lheim, Germany
 *	peter_(at)_pitschu.de
 *
 *  Unmodified reproduction and distribution of this entire
 *  source code in any form is permitted provided the above
 *  notice is preserved.
 *  I make this source code available free of charge and therefore
 *  offer neither support nor guarantee for its functionality.
 *  Furthermore, I assume no liability for the consequences of
 *  its use.
 *  The source code may only be used and modified for private,
 *  non-commercial purposes. Any further use requires my consent.
 *
 *	History
 *	25.01.2022	pitschu		Start of work
 */
#pragma once

#include <stdio.h>
#include "math.h"
#include "pico/stdlib.h"
#include "pico/binary_info.h"
#include "hardware/dma.h"

#include "hub75.pio.h" // generated by pioasm (in build dir)

// Size of the display, currently only square displays are supported
#define DISPLAY_WIDTH 64
#define DISPLAY_HEIGHT 32

#define RGBRGB_MASK_A 0b000000000000000000111111
#define RGBRGB_SHIFT_A 0
#define ROW_MASK 0b000000000000011111000000
#define ROW_SHIFT 6

#define RGBRGB_MASK_B 0b000011111100000000000000
#define RGBRGB_SHIFT 14

#define LATCH_MASK 0b000000000000100000000000
#define LATCH_SHIFT 11
#define OE_MASK 0b000000000001000000000000
#define OE_SHIFT 12

// Scan factor of the display
// Code will currently not work correctly if this is not exactly half of DISPLAY_SIZE
#define DISPLAY_SCAN 32

// Integer between 1 and 8
// Lower numbers cause LSBs to be skipped
#define DISPLAY_BITDEPTH 8

// R0, G0, B0, R1, G1, B1 pins, consecutive
#define DISPLAY_DATAPINS_BASE 15
#define DISPLAY_DATAPINS_COUNT 6

// A, B, C, D. E pins for row selection, consecutive
#define DISPLAY_ROWSEL_BASE 26
#define DISPLAY_ROWSEL_COUNT 4

// Must be consecutive
#define DISPLAY_STROBEPIN 7
#define DISPLAY_OENPIN 5
#define DISPLAY_CLKPIN 6

// Amount of pixels per framebuffer
#define DISPLAY_FRAMEBUFFER_SIZE (DISPLAY_WIDTH * DISPLAY_HEIGHT)

void hub75_init();
void hub75_start();

int hub75_update(int state, uint32_t *image);
void hub75_set_masterbrightness(int brt);
